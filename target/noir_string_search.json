{"noir_version":"0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c","hash":14338700290566622717,"abi":{"parameters":[{"name":"body_text","type":{"kind":"array","length":1054,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"substring_text","type":{"kind":"array","length":279,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"position","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"substring_length","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"23":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"32":{"source":"mod hash;\nmod aes128;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod embedded_curve_ops;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod convert;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\nmod bigint;\nmod runtime;\nmod meta;\nmod append;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(verification_key: [Field], proof: [Field], public_inputs: [Field], key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"47":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"53":{"source":"use crate::substring;\nuse crate::substring::get_lt_predicate;\n\nunconstrained pub fn search<let N: u64, let M: u64>(\n    haystack: [u8; N],\n    needle: [u8; M],\n    haystack_length: u64,\n    needle_length: u64\n) -> (bool, u64) {\n    let mut found = false;\n    let mut found_index: u64 = 0;\n    for i in 0..haystack_length - needle_length {\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    (found, found_index)\n}\n\n/**\n * @brief validate the body text contains zero-values for all indices >= byte_length\n * @note NOT NEEDED. Consider removing. Values beyond byte_length are not used in matching algorithm so no need to constrain them\n **/\nfn validate_body<let BODYBYTES: u64, let BODYCHUNKS: u64>(data: [u8; BODYBYTES], length: u64, _: [Field; BODYCHUNKS]) {\n    // we want a conditional assert for cases where i >= length\n    // if i >= length we want to assert that data = 0\n    let mut delta: Field = length as Field;\n    for i in 0..BODYBYTES {\n        let predicate = substring::lt(i, length);\n        let predicate = get_lt_predicate(i, length);\n\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size(14);\n        delta = delta - 1;\n        std::as_witness(delta);\n\n        // assert that if predicate = 0 then byte = 0\n        assert(data[i] as Field * predicate as Field == data[i] as Field);\n    }\n}\n","path":"/Users/zac/noir_string_search/src/utils.nr"},"54":{"source":"struct SubString<let MaxBytes: u64> {\n    body: [u8; MaxBytes],\n    byte_length: u64,\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    let mut result: u8 = 0;\n    if (predicate) {\n        result = lhs;\n    } else {\n        result = rhs;\n    }\n    result\n}\n\nfn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    let result = __conditional_select(lhs, rhs, predicate);\n    let result_f = result as Field;\n    let lhs_f = lhs as Field;\n    let rhs_f = rhs as Field;\n\n    let diff = lhs_f - rhs_f;\n    std::as_witness(diff);\n    assert((predicate as Field) * (diff) + rhs_f == result_f);\n    result\n}\n\nunconstrained fn get_lt_predicate(x: u64, y: u64) -> bool {\n    x < y\n}\n\nunconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u64;\n    let b = y as u64;\n    let r = a < b;\n    r\n}\n\npub fn lt(x: u64, y: u64) -> bool {\n    let predicate = get_lt_predicate(x, y);\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    lt_parameter.assert_max_bit_size(14);\n\n    predicate\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    let predicate = get_lt_predicate_f(x, y);\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    lt_parameter.assert_max_bit_size(14);\n\n    predicate\n}\n\n// need to convert SubString into Chunks\n\n// 3209 -> 3213 = 4\nimpl<let MaxBytes: u64> SubString<MaxBytes> {\n    fn new<let InputBytes: u64>(input: [u8; InputBytes], input_length: u64) -> Self {\n        assert(InputBytes <= MaxBytes);\n        assert(input_length <= InputBytes);\n        let mut body: [u8; MaxBytes] = [0; MaxBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    fn concat<let OtherBytes: u64>(self, other: SubString<OtherBytes>) -> Self {\n        assert(\n            OtherBytes <= MaxBytes, \"SubString::concat. SubString being concatted has larger max length. Try swapping params around and call prepend\"\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxBytes, \"SubString::concat, concatenated string exceeds MaxBytes\"\n        );\n        let mut body = self.body;\n        let offset: u64 = self.byte_length;\n        for i in 0..OtherBytes {\n            let predicate = lt(i, other.byte_length); // 3.36 gates\n\n            let lhs_index = predicate as Field * (i as Field + offset as Field); // ensure array index does not overflow\n            let lhs = body[lhs_index];\n            let rhs = other.body[i];\n            // an if statement costs 6.5 gates, this method costs 3.25 gates\n            let byte: u8 = conditional_select(lhs, rhs, predicate);\n            body[i + offset] = byte;\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\n","path":"/Users/zac/noir_string_search/src/substring.nr"},"55":{"source":"// fn main(x: Field, y: pub Field) {\n//     assert(x != y);\n// }\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n//     // Uncomment to make test fail\n//     // main(1, 1);\n// }\nmod utils;\nmod substring;\n\nglobal BODYCHUNKS = 34;\n\nglobal MAXSUBSTRINGBYTES = 93;\nglobal MAXSUBSTRINGCHUNKS = 3;\n\nuse substring::SubString;\n\nstruct StringBody<let BODYBYTES: u64, let BODYCHUNKS: u64> {\n    body: [u8; BODYBYTES],\n    chunks: [Field; BODYCHUNKS],\n    byte_length: u64\n}\n\nstruct StringTarget {\n    body: [u8; MAXSUBSTRINGBYTES],\n    chunks: [Field; MAXSUBSTRINGCHUNKS],\n    byte_length: u64\n}\n\nunconstrained fn get_lt_predicate(x: u64, y: u64) -> bool {\n    x < y\n}\n\nimpl<let BODYBYTES: u64, let BODYCHUNKS: u64> StringBody<BODYBYTES, BODYCHUNKS> {\n\n    fn compute_chunks(body: [u8; BODYBYTES]) -> [Field; BODYCHUNKS] {\n        let mut chunks: [Field; BODYCHUNKS] = [0; BODYCHUNKS];\n        for i in 0..BODYCHUNKS {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 256;\n                limb += body[i * 31 + j] as Field;\n            }\n            chunks[i] = limb;\n            std::as_witness(chunks[i]);\n        }\n        chunks\n    }\n\n    fn new<let SubStringBytes: u64>(haystack: SubString<SubStringBytes>) -> Self {\n        assert(SubStringBytes <= BODYBYTES, \"StringBody::new input max length too large!\");\n        let mut body: [u8; BODYBYTES] = [0; BODYBYTES];\n        for i in 0..SubStringBytes {\n            body[i] = haystack.body[i];\n        }\n        StringBody { body, chunks: StringBody::compute_chunks(body), byte_length: haystack.byte_length }\n    }\n\n    fn from_array(data: [u8; BODYBYTES], length: u64) -> Self {\n        assert(length <= BODYBYTES);\n        StringBody { body: data, chunks: StringBody::compute_chunks(data), byte_length: length }\n    }\n\n    fn convert_chunk_to_bytes(self, chunk_idx: u64) -> [u8; 31] {\n        let chunk = self.chunks[chunk_idx];\n        chunk.to_be_bytes(31).as_array()\n    }\n\n    // substring has a maximum number of bytes\n    // which requires a maximum number of chunks\n    // when aligning the substring chunks with the body chunks, we may need 1 additional chunk\n    // todo hmm\n    fn substring_match<let SSBYTES: u64, let PADDED_SUBSTRING_BYTES: u64, let PADDED_SUBSTRING_CHUNKS: u64>(\n        self,\n        substring: SubString<SSBYTES/*, PADDED_SUBSTRING_BYTES*/>,\n        _: [Field; PADDED_SUBSTRING_CHUNKS],\n        __: u64\n    ) -> bool {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text \n        let (found, position): (bool, u64) = utils::search(\n            self.body,\n            substring.body,\n            self.byte_length,\n            substring.byte_length\n        );\n        assert(found == true, \"substring not present in main text!\");\n        assert(\n            position + substring.byte_length <= self.byte_length, \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\"\n        );\n        let substring_length = substring.byte_length;\n\n        let chunk_index: u64 = position / 31;\n        let chunk_offset: u64 = position % 31;\n\n        let num_bytes_in_first_chunk = 31 - chunk_offset;\n        let mut num_remaining_bytes: u64 = 0;\n        if (substring_length >= num_bytes_in_first_chunk) {\n            num_remaining_bytes = (substring_length - num_bytes_in_first_chunk);\n        }\n        let num_full_chunks = num_remaining_bytes / 31;\n\n        let mut starting_substring_byte_index_of_final_chunk: u64 = 0;\n\n        if (substring_length >= num_bytes_in_first_chunk) {\n            starting_substring_byte_index_of_final_chunk = num_full_chunks * 31 + num_bytes_in_first_chunk;\n        } else {\n            starting_substring_byte_index_of_final_chunk = 0;\n        }\n        let body_chunk_index_of_final_chunk = num_full_chunks + chunk_index + 1; // hmm should this be +1?\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n\n            when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n\n            a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n\n            Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n\n            The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n\n            If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // GET INITIAL CHUNK\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let body_bytes: [u8; 31] = self.chunks[chunk_index].to_be_bytes(31).as_array();\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = substring::lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.body[substring_idx] as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // GET FINAL CHUNK\n        let mut new_initial_chunk: [Field; 31] = [0; 31];\n        let merge_chunks = (num_bytes_in_first_chunk > substring_length);\n\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = 0;\n\n        // this nasty!\n        if (substring_length >= num_bytes_in_first_chunk) {\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = num_full_chunks + chunk_index + 1;\n        } else {\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index;\n        }\n\n        let final_haystack_chunk = self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n        let body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes(31).as_array();\n        // let body_bytes = self.convert_chunk_to_bytes(chunk_index_of_final_haystack_chunk_with_matching_needle_bytes);\n        println(f\"body bytes = {body_bytes}\");\n        for i in 0..31 {\n            let lhs_index = starting_substring_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = substring::lt_f(lhs_index, substring_length as Field);\n            let lhs: Field = substring.body[lhs_index] as Field;\n            let rhs: Field = body_bytes[i] as Field;\n            let byte: Field = predicate as Field * (lhs - rhs) + rhs;\n            final_chunk[i] = byte;\n            // }\n\n            // for i in 0..31 {\n            // let predicate = (starting_substring_byte_index_of_final_chunk + i) < substring_length;\n            let lhs_index = predicate as Field * (lhs_index);\n\n            let lhs = initial_chunk[lhs_index];\n            let rhs = body_bytes[i] as Field;\n            let byte: Field = lhs as Field * predicate as Field + rhs as Field * (1 - predicate as Field);\n            //  initial_chunk[i] = \n            std::as_witness(byte);\n            let val = (byte as Field * merge_chunks as Field)\n                + initial_chunk[(i as Field) as Field * (1 - merge_chunks as Field)];\n            std::as_witness(val);\n            new_initial_chunk[i] = val;\n        }\n        println(f\"initial chunk = {initial_chunk}\");\n        println(f\"new initial chunk = {new_initial_chunk}\");\n        let mut initial_chunk_field: Field = 0;\n        for i in 0..31 {\n            initial_chunk_field *= 256;\n            initial_chunk_field += new_initial_chunk[i];\n        }\n        std::as_witness(initial_chunk_field);\n        let mut final_chunk_field: Field = 0;\n        for i in 0..31 {\n            final_chunk_field *= 256;\n            final_chunk_field += final_chunk[i];\n        }\n        final_chunk_field = initial_chunk_field * merge_chunks as Field + (final_chunk_field * (1 - merge_chunks as Field));\n        let lhs = initial_chunk_field;\n        let rhs = self.chunks[chunk_index];\n        assert(lhs == rhs);\n\n        println(f\"merge chunks = {merge_chunks}\");\n        println(f\"final_chunk_field = {final_chunk_field}\");\n        let lhs = final_chunk_field;\n        let rhs = final_haystack_chunk;\n        assert(lhs == rhs);\n\n        // // constituting body chunks is hard because we need to read from unknown index = 2 gates = womp\n        let mut substring_chunks: [Field; PADDED_SUBSTRING_CHUNKS] = [0; PADDED_SUBSTRING_CHUNKS];\n\n        for i in 0..PADDED_SUBSTRING_CHUNKS {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let mut byte = substring.body[num_bytes_in_first_chunk + (i * 31) + j];\n                slice += byte as Field;\n            }\n            substring_chunks[i] = slice;\n        }\n\n        let body_chunk_offset = chunk_index + 1;\n        for i in 0..PADDED_SUBSTRING_CHUNKS {\n            let mut lhs = substring_chunks[i];\n\n            let rhs = self.chunks[i + body_chunk_offset];\n\n            let predicate = i < num_full_chunks;\n            lhs = lhs * (predicate as Field) + rhs * (1 - predicate as Field);\n            assert(lhs == rhs);\n        }\n        true\n    }\n}\n\n#[test]\nfn test() {\n    let mut body_text: [u8; 124] = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n        70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n        90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\n        110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123\n    ];\n    // let mut body_text: [u8; 124] = [0; 124];\n    // for i in 0..124 {\n    //     body_text[i] = body_text_e[123 - i];\n    // }\n    // let substring_text: [u8; 62] = [\n    //     10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n    //     20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n    //     30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n    //     40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n    //     50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n    //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    //     0, 0\n    // ];\n    let substring_text: [u8; 122] = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    // let res2 = dep::std::hash::sha256_var(body_text, 50);\n    // println(f\"{res2}\");\n    let mut Body: StringBody<124, 4> = StringBody::from_array(body_text, 124);\n    let mut substring: SubString<122/*,2*/> = SubString::new(substring_text, 62);\n    // StringBody { body: substring_text, chunks: [0; 2], byte_length: 62 };\n    let r = Body.substring_match(substring, [0; 2], 0);\n    assert(r == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let mut body_text: [u8; 124] = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n        70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n        90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\n        110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123\n    ];\n    let substring_text: [u8; 122] = [\n        2, 3, 4, 5, 6, 7, 8, 9,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let mut Body: StringBody<124, 4> = StringBody::from_array(body_text, 124);\n    let mut substring: SubString<122/*,2*/> = SubString::new(substring_text, 8);\n    let r = Body.substring_match(substring, [0; 2], 0);\n    assert(r == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let mut body_text: [u8; 124] = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n        50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n        70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n        90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\n        110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123\n    ];\n    let substring_text: [u8; 122] = [\n        2, 3, 4, 5, 6, 7, 8, 9,\n        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n        30, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ];\n    let mut Body: StringBody<124, 4> = StringBody::from_array(body_text, 124);\n    let mut substring: SubString<122/*,2*/> = SubString::new(substring_text, 29);\n    let r = Body.substring_match(substring, [0; 2], 0);\n    assert(r == true);\n}\n// 7042 = 1, 1\n// 7190 = 2, 1\n// 7339 = 3, 1\n// 7708 = 3, 2\n\n// 7708 -> 11724 => 30, 2\n// 4016 diff for 27 chunks = 837 bytes = 4.8 per byte or 130 per chunk. seems bad?\nglobal BODYLEN = 1054;\nglobal BODYCHUNK = 34;\nglobal SUBSTRINGLEN = 279;\nglobal SUBSTRINGCHUNK = 9;\n// 841 - 692 = 149 argh\n// 4098 -> 4137 = 39 gates. 31 * 1.25 for u8 bytes = 39 \nunconstrained fn get_test_stringbody(\n    body_text: [u8; BODYLEN],\n    substring_text: [u8; SUBSTRINGLEN],\n    _: u64,\n    body_length: u64,\n    substring_length: u64\n) -> (StringBody<BODYLEN, BODYCHUNK>, StringBody<SUBSTRINGLEN,SUBSTRINGCHUNK>) {\n    let mut Body: StringBody<BODYLEN, BODYCHUNK> = StringBody::from_array(body_text, body_length);\n\n    let mut SubString: StringBody<SUBSTRINGLEN,SUBSTRINGCHUNK> = StringBody { body: substring_text, chunks: [0; SUBSTRINGCHUNK], byte_length: substring_length };\n    (Body, SubString)\n}\n\n// 3215 -> 3230 = 15 gates per it\nglobal OtherBytes = 20;\nglobal MaxBytes = 32;\n\n// fn main(body: [u8; MaxBytes], other_body: [u8; MaxBytes], byte_length: u64, other_byte_length: u64) {\n//     let A : substring::SubString<MaxBytes> = substring::SubString::new(body, byte_length);\n//     let B : substring::SubString<OtherBytes> = substring::SubString::new(other_body, other_byte_length);\n\n//     let C = A.concat(B);\n//     println(f\"{C}\");\n//     // assert(\n//     //     OtherBytes <= MaxBytes, \"SubString::concat. SubString being concatted has larger max length. Try swapping params around and call prepend\"\n//     // );\n//     // assert(\n//     //     byte_length + other_byte_length <= MaxBytes, \"SubString::concat, concatenated string exceeds MaxBytes\"\n//     // );\n//     // //  let mut body = body;\n//     // let offset: u64 = byte_length;\n//     // for i in 0..OtherBytes {\n//     //     let predicate = i < other_byte_length; // TODO optimize\n//     //     let lhs = body[i as Field + offset as Field];\n//     //     let rhs = other_body[i];\n//     //     println(f\"{predicate}\");\n//     //     println(f\"{lhs}\");\n//     //     println(f\"{rhs}\");\n//     //     // 1 it = 2989\n//     //     // 2 it = 3004 = 15 gates\n//     //     // 1 it = 2982\n//     //     // 2 it = 2991 = 9 gates => 6 gates\n//     //     //    let byte: Field = (lhs as Field - rhs as Field) * predicate as Field + rhs as Field;\n//     //     //    println(f\"{byte}\");\n//     //     //    let byte: u8 = conditional_select(lhs, rhs, predicate);\n//     //     // (lhs - rhs) * predicate + rhs = 2 gates\n//     //     let mut byte: u8 = 0;\n//     //     if (predicate) {\n//     //         byte = lhs;\n//     //     } else {\n//     //         byte = rhs;\n//     //     }\n//     //     println(f\"{byte}\");\n//     //     // 13 / 2 = 6.5\n//     //     //   body[i + offset] = byte;\n//     // }\n//     //   println(f\"{body}\");\n//     //  SubString { body, byte_length: self.byte_length + other_byte_length }\n// }\n\nfn main(\n    body_text: [u8; BODYLEN],\n    substring_text: [u8; SUBSTRINGLEN],\n    position: u64,\n    body_length: u64,\n    substring_length: u64\n) {\n    (position as Field).assert_max_bit_size(14);\n    //   for i in 0..1 {\n    // for i in 0..124 {\n    //     body_text[i] = body_text[i] + 1;\n    // }\n    // for i in 0..900 {\n    //     substring_text[i] = substring_text[i] + 1;\n    // }\n    //  let mut Body = StringBody::validate_body(body_text, body_length, [0; 40]);\n    let mut Body: StringBody<BODYLEN, BODYCHUNK> = StringBody::from_array(body_text, body_length);\n\n    let mut SubString: SubString<SUBSTRINGLEN> = SubString::new(substring_text, substring_length);\n    //vStringBody { body: substring_text, chunks: [0; SUBSTRINGCHUNK], byte_length: substring_length };\n\n    assert(Body.chunks[position as Field] != 0); // this adds ~600 gates because we instantiate as ROM array\n    // let (Body, SubString) = get_test_stringbody(\n    //     body_text,\n    //     substring_text,\n    //     position,\n    //     body_length,\n    //     substring_length\n    // );\n    let r = Body.substring_match(SubString, [0; SUBSTRINGCHUNK], position);\n    println(f\"{SubString}\");\n    println(f\"{r}\");\n}\n// 4574 to 6578 = 2002\n// 6963 to 15412 = 8449 for 1860 bytes , searching 610\n\n// 110,55 to 11,455 = 400 for 31 bytes = 13 gates per byte. meh\n#[test]\nunconstrained fn test_partial_match() {\n    let mut foo: [u8; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let mut bar: [u8; 3] = [4, 5, 6];\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 8192] = Engine.get_random_bytes();\n    let mut bar: [u8; 512] = Engine.get_random_bytes();\n    println(f\"{foo}\");\n    println(f\"{bar}\");\n    let (res, _) = utils::search(foo, bar, 10, 3);\n\n    assert(res == false);\n}\n\nstruct DebugRandomEngine {\n    seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes(32).as_array();\n        let hash: [u8; 32] = dep::std::hash::sha256(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    unconstrained fn get_random_bytes<let NBytes: u64>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u64;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n\n","path":"/Users/zac/noir_string_search/src/main.nr"}},"names":["main"]}